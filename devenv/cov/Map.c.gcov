        -:    0:Source:../../src/Map.c
        -:    0:Graph:obj/src/Map.gcno
        -:    0:Data:obj/src/Map.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:﻿/** ------------------------------------------------------------------
        -:    2:*
        -:    3:*	@file	Map.c
        -:    4:*	@brief	Map
        -:    5:*	@author	H.Someya
        -:    6:*	@date	2021/08/06
        -:    7:*
        -:    8:MIT License
        -:    9:
        -:   10:Copyright (c) 2021 Hirobumi Someya
        -:   11:
        -:   12:Permission is hereby granted, free of charge, to any person obtaining a copy
        -:   13:of this software and associated documentation files (the "Software"), to deal
        -:   14:in the Software without restriction, including without limitation the rights
        -:   15:to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:   16:copies of the Software, and to permit persons to whom the Software is
        -:   17:furnished to do so, subject to the following conditions:
        -:   18:
        -:   19:The above copyright notice and this permission notice shall be included in all
        -:   20:copies or substantial portions of the Software.
        -:   21:
        -:   22:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   23:IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   24:FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   25:AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   26:LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        -:   27:OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        -:   28:SOFTWARE.
        -:   29:*
        -:   30:*/
        -:   31:#include "Map.h"
        -:   32:#include <string.h>
        -:   33:#include "nullptr.h"
        -:   34:
        -:   35:/* -------------------------------------------------------------------
        -:   36:*	Privates
        -:   37:*/
        -:   38:
        -:   39:/* -------------------------------------------------------------------
        -:   40:*	Services
        -:   41:*/
        -:   42:
        -:   43:/// <summary>
        -:   44:/// <para>Mapを初期化する。</para>
        -:   45:/// </summary>
        -:   46:/// <param name="capacity">最大要素数。</param>
        -:   47:/// <param name="elements">動作に必要な要素バッファ。
        -:   48:/// 最大要素数分確保して指定すること。</param>
        -:   49:/// <param name="ctxt">コンテキスト。</param>
        -:   50:/// <returns>なし。</returns>
        2:   51:void Map_Init(
        -:   52:	int32_t capacity,
        -:   53:	MapElm* elements,
        -:   54:	Map* ctxt)
        -:   55:{
        2:   56:	if (ctxt != nullptr)
        -:   57:	{
        1:   58:		memset(ctxt, 0, sizeof(Map));
        1:   59:		ctxt->Elements = elements;
        1:   60:		ctxt->Capacity = capacity;
        -:   61:	}
        2:   62:}
        -:   63:
        -:   64:/// <summary>
        -:   65:/// <para>Mapの最大要素数を取得する。</para>
        -:   66:/// </summary>
        -:   67:/// <param name="ctxt">コンテキスト。</param>
        -:   68:/// <returns>最大要素数。</returns>
        3:   69:int32_t Map_Capacity(
        -:   70:	const Map* ctxt)
        -:   71:{
        3:   72:	int32_t result = 0;
        3:   73:	if (ctxt != nullptr)
        -:   74:	{
        2:   75:		result = ctxt->Capacity;
        -:   76:	}
        3:   77:	return result;
        -:   78:}
        -:   79:
        -:   80:/// <summary>
        -:   81:/// <para>Mapの蓄積済み要素数を取得する。</para>
        -:   82:/// </summary>
        -:   83:/// <param name="ctxt">コンテキスト。</param>
        -:   84:/// <returns>蓄積済み要素数。</returns>
        9:   85:int32_t Map_Count(
        -:   86:	const Map* ctxt)
        -:   87:{
        9:   88:	int32_t result = 0;
        9:   89:	if (ctxt != nullptr)
        -:   90:	{
        8:   91:		result = ctxt->Count;
        -:   92:	}
        9:   93:	return result;
        -:   94:}
        -:   95:
        -:   96:/// <summary>
        -:   97:/// <para>Mapをクリアする。</para>
        -:   98:/// </summary>
        -:   99:/// <param name="ctxt">コンテキスト。</param>
        -:  100:/// <returns>なし。</returns>
        3:  101:void Map_Clear(
        -:  102:	Map* ctxt)
        -:  103:{
        3:  104:	if (ctxt != nullptr)
        -:  105:	{
        2:  106:		ctxt->Count = 0;
        2:  107:		ctxt->Root = nullptr;
        -:  108:	}
        3:  109:}
        -:  110:
        -:  111:/// <summary>
        -:  112:/// <para>valueをkeyに関連付ける。</para>
        -:  113:/// <para>同じkeyが既にある場合、関連付けを上書きする。</para>
        -:  114:/// <para>※　keyとvalueを関連付けるだけであって、valueのスコープと定数/変数は、
        -:  115:/// ValueFor/ValueAtと合わせ、ユーザーが考慮しなければならない。　※</para>
        -:  116:/// <para>関連付けできた場合、蓄積済み要素数を返す。</para>
        -:  117:/// <para>関連付けできなかった場合は0または負。</para>
        -:  118:/// </summary>
        -:  119:/// <param name="value">値。</param>
        -:  120:/// <param name="key">キー。</param>
        -:  121:/// <param name="ctxt">コンテキスト。</param>
        -:  122:/// <returns>蓄積済み要素数。</returns>
        9:  123:int32_t Map_Relate(
        -:  124:	const void* value, MapKey_t key,
        -:  125:	Map* ctxt)
        -:  126:{
        9:  127:	int32_t result = 0;
        9:  128:	if (ctxt != nullptr)
        -:  129:	{
        8:  130:		AvlNode* existing = AvlTree_Search(key, ctxt->Root);
        8:  131:		if (existing != nullptr)
        -:  132:		{
        1:  133:			existing->Content.Value = value;
        -:  134:
        1:  135:			result = ctxt->Count;
        -:  136:		}
        7:  137:		else if (ctxt->Count < ctxt->Capacity)
        -:  138:		{
        6:  139:			MapElm* elm = &ctxt->Elements[ctxt->Count];
        6:  140:			AvlNode_Init(key, value, &elm->Node);
        6:  141:			ctxt->Root = AvlTree_Insert(&elm->Node, ctxt->Root);
        6:  142:			ctxt->Count += 1;
        -:  143:
        6:  144:			result = ctxt->Count;
        -:  145:		}
        -:  146:	}
        9:  147:	return result;
        -:  148:}
        -:  149:
        -:  150:/// <summary>
        -:  151:/// <para>keyに対応するvalueを取得する。</para>
        -:  152:/// <para>※　Relateで関連付けたアドレスを返すものである。
        -:  153:/// 従って、valueのスコープと定数/変数は、
        -:  154:/// Relateと合わせ、ユーザーが考慮しなければならない。　※</para>
        -:  155:/// </summary>
        -:  156:/// <param name="key">キー。</param>
        -:  157:/// <param name="ctxt">コンテキスト。</param>
        -:  158:/// <returns>keyに対応するvalue。</returns>
        6:  159:void* Map_ValueFor(
        -:  160:	MapKey_t key,
        -:  161:	const Map* ctxt)
        -:  162:{
        6:  163:	void* result = nullptr;
        6:  164:	if (ctxt != nullptr)
        -:  165:	{
        6:  166:		AvlNode* node = AvlTree_Search(key, ctxt->Root);
        6:  167:		if (node != nullptr)
        -:  168:		{
        4:  169:			result = (void*)node->Content.Value;
        -:  170:		}
        -:  171:	}
        6:  172:	return result;
        -:  173:}
        -:  174:
        -:  175:/// <summary>
        -:  176:/// <para>指定したインデックス位置のvalueを取得する。</para>
        -:  177:/// <para>※　Relateで関連付けたアドレスを返すものである。
        -:  178:/// 従って、valueのスコープと定数/変数は、
        -:  179:/// Relateと合わせ、ユーザーが考慮しなければならない。　※</para>
        -:  180:/// </summary>
        -:  181:/// <param name="index">インデックス位置(0～)。</param>
        -:  182:/// <param name="ctxt">コンテキスト。</param>
        -:  183:/// <returns>インデックス位置のvalue。</returns>
        5:  184:void* Map_ValueAt(
        -:  185:	int32_t index,
        -:  186:	const Map* ctxt)
        -:  187:{
        5:  188:	void* result = nullptr;
        5:  189:	if ((ctxt != nullptr) &&
        3:  190:		(0 <= index) && (index < ctxt->Count))
        -:  191:	{
        2:  192:		MapElm* elm = &ctxt->Elements[index];
        2:  193:		result = (void*)elm->Node.Content.Value;
        -:  194:	}
        5:  195:	return result;
        -:  196:}
        -:  197:
        -:  198:/* -------------------------------------------------------------------
        -:  199:*	Unit Test
        -:  200:*/
        -:  201:#ifdef _UNIT_TEST
        -:  202:#include "Assertions.h"
        -:  203:
        -:  204:typedef struct _Map_UnitTest_Value {
        -:  205:	int Member1;
        -:  206:	char Member2;
        -:  207:	short Member3[4];
        -:  208:} Map_UnitTest_Value;
        -:  209:
        1:  210:void Map_UnitTest(void)
        -:  211:{
        1:  212:	Assertions* assertions = Assertions_Instance();
        1:  213:	const Map_UnitTest_Value* value = nullptr;
        -:  214:	MapElm mapElms[3];
        -:  215:	Map_UnitTest_Value values[5];
        1:  216:	memset(values, 0, sizeof values);
        -:  217:	Map map;
        -:  218:
        -:  219:	// -----------------------------------------
        -:  220:	// 1-1 Init(ctxt==nullptr)
        1:  221:	Map_Init(3, mapElms, nullptr);
        -:  222:	// -----------------------------------------
        -:  223:	// 1-2 Init
        1:  224:	Map_Init(3, mapElms, &map);
        1:  225:	Assertions_Assert(Map_Capacity(&map) == 3, assertions);
        1:  226:	Assertions_Assert(Map_Count(&map) == 0, assertions);
        -:  227:
        -:  228:	// -----------------------------------------
        -:  229:	// 2-1 Capacity(ctxt==nullptr)
        1:  230:	Assertions_Assert(Map_Capacity(nullptr) == 0, assertions);
        -:  231:	// -----------------------------------------
        -:  232:	// 2-2 Capacity
        1:  233:	Assertions_Assert(Map_Capacity(&map) == 3, assertions);
        -:  234:
        -:  235:	// -----------------------------------------
        -:  236:	// 3-1 Count(ctxt==nullptr)
        1:  237:	values[2].Member1 = 1000;
        1:  238:	values[2].Member2 = 10;
        1:  239:	values[2].Member3[0] = 100;
        1:  240:	values[2].Member3[2] = 102;
        1:  241:	Map_Relate(&values[2], 12345, &map);
        1:  242:	Assertions_Assert(Map_Count(nullptr) == 0, assertions);
        -:  243:	// -----------------------------------------
        -:  244:	// 3-2 Count
        1:  245:	Assertions_Assert(Map_Count(&map) == 1, assertions);
        -:  246:
        -:  247:	// -----------------------------------------
        -:  248:	// 4-1 Clear(ctxt==nullptr)
        1:  249:	Map_Clear(nullptr);
        1:  250:	Assertions_Assert(Map_Count(&map) == 1, assertions);
        -:  251:	// -----------------------------------------
        -:  252:	// 4-2 Clear
        1:  253:	Map_Clear(&map);
        1:  254:	Assertions_Assert(Map_Count(&map) == 0, assertions);
        -:  255:
        -:  256:	// -----------------------------------------
        -:  257:	// 5-1 Relate(ctxt==nullptr)
        1:  258:	values[2].Member1 = 1000;
        1:  259:	values[2].Member2 = 10;
        1:  260:	values[2].Member3[0] = 100;
        1:  261:	values[2].Member3[2] = 102;
        1:  262:	Assertions_Assert(Map_Relate(&values[2], 12345, nullptr) == 0, assertions);
        1:  263:	value = Map_ValueFor(12345, &map);
        1:  264:	Assertions_Assert(value == nullptr, assertions);
        -:  265:	// -----------------------------------------
        -:  266:	// 5-2 Relate
        1:  267:	values[2].Member1 = 1000;
        1:  268:	values[2].Member2 = 10;
        1:  269:	values[2].Member3[0] = 100;
        1:  270:	values[2].Member3[2] = 102;
        1:  271:	Assertions_Assert(Map_Relate(&values[2], 12345, &map) == 1, assertions);
        1:  272:	value = Map_ValueFor(12345, &map);
        1:  273:	Assertions_Assert(value != nullptr, assertions);
        1:  274:	Assertions_Assert(value->Member1 == 1000, assertions);
        1:  275:	Assertions_Assert(value->Member2 == 10, assertions);
        1:  276:	Assertions_Assert(value->Member3[0] == 100, assertions);
        1:  277:	Assertions_Assert(value->Member3[2] == 102, assertions);
        1:  278:	Assertions_Assert(Map_Count(&map) == 1, assertions);
        -:  279:	// -----------------------------------------
        -:  280:	// 5-3 Relate
        1:  281:	values[0].Member1 = 2000;
        1:  282:	values[0].Member2 = 20;
        1:  283:	values[0].Member3[0] = 200;
        1:  284:	values[0].Member3[2] = 202;
        1:  285:	Assertions_Assert(Map_Relate(&values[0], 12345678, &map) == 2, assertions);
        1:  286:	value = Map_ValueFor(12345678, &map);
        1:  287:	Assertions_Assert(value != nullptr, assertions);
        1:  288:	Assertions_Assert(value->Member1 == 2000, assertions);
        1:  289:	Assertions_Assert(value->Member2 == 20, assertions);
        1:  290:	Assertions_Assert(value->Member3[0] == 200, assertions);
        1:  291:	Assertions_Assert(value->Member3[2] == 202, assertions);
        1:  292:	Assertions_Assert(Map_Count(&map) == 2, assertions);
        -:  293:	// -----------------------------------------
        -:  294:	// 5-4 Relate
        1:  295:	values[1].Member1 = 3000;
        1:  296:	values[1].Member2 = 30;
        1:  297:	values[1].Member3[0] = 300;
        1:  298:	values[1].Member3[2] = 302;
        1:  299:	Assertions_Assert(Map_Relate(&values[1], 0x80000000, &map) == 3, assertions);
        1:  300:	value = Map_ValueFor(0x80000000, &map);
        1:  301:	Assertions_Assert(value != nullptr, assertions);
        1:  302:	Assertions_Assert(value->Member1 == 3000, assertions);
        1:  303:	Assertions_Assert(value->Member2 == 30, assertions);
        1:  304:	Assertions_Assert(value->Member3[0] == 300, assertions);
        1:  305:	Assertions_Assert(value->Member3[2] == 302, assertions);
        1:  306:	Assertions_Assert(Map_Count(&map) == 3, assertions);
        -:  307:	// -----------------------------------------
        -:  308:	// 5-5 Relate いっぱいの場合には新たなキーは挿入できない
        1:  309:	values[3].Member1 = 3000;
        1:  310:	values[3].Member2 = 30;
        1:  311:	values[3].Member3[0] = 300;
        1:  312:	values[3].Member3[2] = 302;
        1:  313:	Assertions_Assert(Map_Relate(&values[1], 98765, &map) == 0, assertions);
        1:  314:	value = Map_ValueFor(98765, &map);
        1:  315:	Assertions_Assert(value == nullptr, assertions);
        -:  316:	// -----------------------------------------
        -:  317:	// 5-6 Relate 同じキーは上書き
        1:  318:	values[4].Member1 = 4000;
        1:  319:	values[4].Member2 = 40;
        1:  320:	values[4].Member3[0] = 400;
        1:  321:	values[4].Member3[2] = 402;
        1:  322:	Assertions_Assert(Map_Relate(&values[4], 12345678, &map) == 3, assertions);
        1:  323:	value = Map_ValueFor(12345678, &map);
        1:  324:	Assertions_Assert(value != nullptr, assertions);
        1:  325:	Assertions_Assert(value->Member1 == 4000, assertions);
        1:  326:	Assertions_Assert(value->Member2 == 40, assertions);
        1:  327:	Assertions_Assert(value->Member3[0] == 400, assertions);
        1:  328:	Assertions_Assert(value->Member3[2] == 402, assertions);
        1:  329:	Assertions_Assert(Map_Count(&map) == 3, assertions);
        -:  330:
        -:  331:	// -----------------------------------------
        -:  332:	// 6-x ValueAt
        1:  333:	Map_Clear(&map);
        1:  334:	values[2].Member1 = 1000;
        1:  335:	values[2].Member2 = 10;
        1:  336:	values[2].Member3[0] = 100;
        1:  337:	values[2].Member3[2] = 102;
        1:  338:	Map_Relate(&values[2], 12345, &map);
        1:  339:	values[4].Member1 = 4000;
        1:  340:	values[4].Member2 = 40;
        1:  341:	values[4].Member3[0] = 400;
        1:  342:	values[4].Member3[2] = 402;
        1:  343:	Map_Relate(&values[4], 12345678, &map);
        -:  344:	// -----------------------------------------
        -:  345:	// 6-1 ValueAt(ctxt==nullptr)
        1:  346:	value = Map_ValueAt(0, nullptr);
        1:  347:	Assertions_Assert(value == nullptr, assertions);
        -:  348:	// -----------------------------------------
        -:  349:	// 6-2 ValueAt(index < 0)
        1:  350:	value = Map_ValueAt(-1, &map);
        1:  351:	Assertions_Assert(value == nullptr, assertions);
        -:  352:	// -----------------------------------------
        -:  353:	// 6-3 ValueAt(index >= Count)
        1:  354:	value = Map_ValueAt(2, &map);
        1:  355:	Assertions_Assert(value == nullptr, assertions);
        -:  356:	// -----------------------------------------
        -:  357:	// 6-4 ValueAt
        1:  358:	value = Map_ValueAt(0, &map);
        1:  359:	Assertions_Assert(value != nullptr, assertions);
        1:  360:	Assertions_Assert(value->Member1 == 1000, assertions);
        1:  361:	Assertions_Assert(value->Member2 == 10, assertions);
        1:  362:	Assertions_Assert(value->Member3[0] == 100, assertions);
        1:  363:	Assertions_Assert(value->Member3[2] == 102, assertions);
        -:  364:	// -----------------------------------------
        -:  365:	// 6-5 ValueAt
        1:  366:	value = Map_ValueAt(1, &map);
        1:  367:	Assertions_Assert(value != nullptr, assertions);
        1:  368:	Assertions_Assert(value->Member1 == 4000, assertions);
        1:  369:	Assertions_Assert(value->Member2 == 40, assertions);
        1:  370:	Assertions_Assert(value->Member3[0] == 400, assertions);
        1:  371:	Assertions_Assert(value->Member3[2] == 402, assertions);
        1:  372:}
        -:  373:#endif
