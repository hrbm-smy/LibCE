        -:    0:Source:../../src/Encoders.c
        -:    0:Graph:obj/src/Encoders.gcno
        -:    0:Data:obj/src/Encoders.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:﻿/** -------------------------------------------------------------------------
        -:    2: *
        -:    3: *	@file	Encoders.c
        -:    4: *	@brief	Encoders
        -:    5: *	@author	H.Someya
        -:    6: *	@date	2023/05/12
        -:    7: *
        -:    8: */
        -:    9:/*
        -:   10:MIT License
        -:   11:
        -:   12:Copyright (c) 2021 Hirobumi Someya
        -:   13:
        -:   14:Permission is hereby granted, free of charge, to any person obtaining a copy
        -:   15:of this software and associated documentation files (the "Software"), to deal
        -:   16:in the Software without restriction, including without limitation the rights
        -:   17:to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:   18:copies of the Software, and to permit persons to whom the Software is
        -:   19:furnished to do so, subject to the following conditions:
        -:   20:
        -:   21:The above copyright notice and this permission notice shall be included in all
        -:   22:copies or substantial portions of the Software.
        -:   23:
        -:   24:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   25:IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   26:FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   27:AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   28:LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        -:   29:OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        -:   30:SOFTWARE.
        -:   31:*/
        -:   32:#include "Encoders.h"
        -:   33:
        -:   34:#include "nullptr.h"
        -:   35:
        -:   36:/* --------------------------------------------------------------------------
        -:   37: *  P R I V A T E S
        -:   38: */
        -:   39:
        -:   40:/* --------------------------------------------------------------------------
        -:   41: *  P U B L I C   I N T E R F A C E S
        -:   42: */
        -:   43:
        -:   44:/**
        -:   45: *  @brief エンコード可能判定 @n
        -:   46: *    編集先のバッファがエンコード可能か判定する。
        -:   47: *  @param neededSize エンコードに必要なサイズ。
        -:   48: *  @param dest エンコード先バッファ。
        -:   49: *  @param destSize エンコード先バッファのサイズ。
        -:   50: *  @return 0:不可、非0:可能。
        -:   51: */
        3:   52:int Encoders_CanEncode(
        -:   53:	int32_t neededSize,
        -:   54:	const void *dest, int32_t destSize)
        -:   55:{
        3:   56:	int result = 0;
        3:   57:	if ((dest != nullptr) &&
        -:   58:		(destSize >= neededSize))
        -:   59:	{
        1:   60:		result = 1;
        -:   61:	}
        3:   62:	return result;
        -:   63:}
        -:   64:
        -:   65:/* --------------------------------------------------------------------------
        -:   66: *  Unit Test
        -:   67: */
        -:   68:#ifdef _UNIT_TEST
        -:   69:
        -:   70:#include <string.h>
        -:   71:#include "Assertions.h"
        -:   72:
        1:   73:void Encoders_UnitTest(void)
        -:   74:{
        1:   75:	Assertions *ast = Assertions_Instance();
        -:   76:
        -:   77:	int canEncode;
        -:   78:	uint8_t dest[15];
        -:   79:
        -:   80:	// -----------------------------------------
        -:   81:	// 1-x Encoders_CanEncode
        -:   82:	// -----------------------------------------
        -:   83:	// 1-1 destがNULLだと不可
        1:   84:	canEncode = Encoders_CanEncode(0, nullptr, 0);
        1:   85:	Assertions_Assert(canEncode == 0, ast);
        -:   86:	// -----------------------------------------
        -:   87:	// 1-2 サイズが足りないと不可
        1:   88:	canEncode = Encoders_CanEncode((sizeof dest) + 1, &dest[0], sizeof dest);
        1:   89:	Assertions_Assert(canEncode == 0, ast);
        -:   90:	// -----------------------------------------
        -:   91:	// 1-3 サイズ足りればOK
        1:   92:	canEncode = Encoders_CanEncode(sizeof dest, &dest[0], sizeof dest);
        1:   93:	Assertions_Assert(canEncode != 0, ast);
        -:   94:
        -:   95:	// -----------------------------------------
        -:   96:	// 2-x Encoders_Encode16At
        -:   97:	// -----------------------------------------
        -:   98:	// 2-1 リトルエンディアン
        1:   99:	memset(dest, 0, sizeof dest);
        1:  100:	Encoders_Encode16At(1, 0x1234, 0, dest);
        1:  101:	Assertions_Assert(dest[0] == 0x00, ast);
        1:  102:	Assertions_Assert(dest[1] == 0x34, ast);
        1:  103:	Assertions_Assert(dest[2] == 0x12, ast);
        1:  104:	Assertions_Assert(dest[3] == 0x00, ast);
        -:  105:	// -----------------------------------------
        -:  106:	// 2-2 ビッグエンディアン
        1:  107:	memset(dest, 0, sizeof dest);
        1:  108:	Encoders_Encode16At(1, 0x1234, 1, dest);
        1:  109:	Assertions_Assert(dest[0] == 0x00, ast);
        1:  110:	Assertions_Assert(dest[1] == 0x12, ast);
        1:  111:	Assertions_Assert(dest[2] == 0x34, ast);
        1:  112:	Assertions_Assert(dest[3] == 0x00, ast);
        -:  113:
        -:  114:	// -----------------------------------------
        -:  115:	// 3-x Encoders_Encode32At
        -:  116:	// -----------------------------------------
        -:  117:	// 3-1 リトルエンディアン
        1:  118:	memset(dest, 0, sizeof dest);
        1:  119:	Encoders_Encode32At(1, 0x1234abcd, 0, dest);
        1:  120:	Assertions_Assert(dest[0] == 0x00, ast);
        1:  121:	Assertions_Assert(dest[1] == 0xcd, ast);
        1:  122:	Assertions_Assert(dest[2] == 0xab, ast);
        1:  123:	Assertions_Assert(dest[3] == 0x34, ast);
        1:  124:	Assertions_Assert(dest[4] == 0x12, ast);
        1:  125:	Assertions_Assert(dest[5] == 0x00, ast);
        -:  126:	// -----------------------------------------
        -:  127:	// 3-2 ビッグエンディアン
        1:  128:	memset(dest, 0, sizeof dest);
        1:  129:	Encoders_Encode32At(1, 0x1234abcd, 1, dest);
        1:  130:	Assertions_Assert(dest[0] == 0x00, ast);
        1:  131:	Assertions_Assert(dest[1] == 0x12, ast);
        1:  132:	Assertions_Assert(dest[2] == 0x34, ast);
        1:  133:	Assertions_Assert(dest[3] == 0xab, ast);
        1:  134:	Assertions_Assert(dest[4] == 0xcd, ast);
        1:  135:	Assertions_Assert(dest[5] == 0x00, ast);
        -:  136:
        -:  137:	// -----------------------------------------
        -:  138:	// 4-x Encoders_Encode64At
        -:  139:	// -----------------------------------------
        -:  140:	// 4-1 リトルエンディアン
        1:  141:	memset(dest, 0, sizeof dest);
        1:  142:	Encoders_Encode64At(1, 0x1234abcd5678fedcLL, 0, dest);
        1:  143:	Assertions_Assert(dest[0] == 0x00, ast);
        1:  144:	Assertions_Assert(dest[1] == 0xdc, ast);
        1:  145:	Assertions_Assert(dest[2] == 0xfe, ast);
        1:  146:	Assertions_Assert(dest[3] == 0x78, ast);
        1:  147:	Assertions_Assert(dest[4] == 0x56, ast);
        1:  148:	Assertions_Assert(dest[5] == 0xcd, ast);
        1:  149:	Assertions_Assert(dest[6] == 0xab, ast);
        1:  150:	Assertions_Assert(dest[7] == 0x34, ast);
        1:  151:	Assertions_Assert(dest[8] == 0x12, ast);
        1:  152:	Assertions_Assert(dest[9] == 0x00, ast);
        -:  153:	// -----------------------------------------
        -:  154:	// 4-2 ビッグエンディアン
        1:  155:	memset(dest, 0, sizeof dest);
        1:  156:	Encoders_Encode64At(1, 0x1234abcd5678fedcLL, 1, dest);
        1:  157:	Assertions_Assert(dest[0] == 0x00, ast);
        1:  158:	Assertions_Assert(dest[1] == 0x12, ast);
        1:  159:	Assertions_Assert(dest[2] == 0x34, ast);
        1:  160:	Assertions_Assert(dest[3] == 0xab, ast);
        1:  161:	Assertions_Assert(dest[4] == 0xcd, ast);
        1:  162:	Assertions_Assert(dest[5] == 0x56, ast);
        1:  163:	Assertions_Assert(dest[6] == 0x78, ast);
        1:  164:	Assertions_Assert(dest[7] == 0xfe, ast);
        1:  165:	Assertions_Assert(dest[8] == 0xdc, ast);
        1:  166:	Assertions_Assert(dest[9] == 0x00, ast);
        1:  167:}
        -:  168:#endif
