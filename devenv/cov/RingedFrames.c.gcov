        -:    0:Source:../../src/RingedFrames.c
        -:    0:Graph:obj/src/RingedFrames.gcno
        -:    0:Data:obj/src/RingedFrames.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:﻿/** ------------------------------------------------------------------
        -:    2:*
        -:    3:*	@file	RingedFrames.c
        -:    4:*	@brief	フレームリングバッファ
        -:    5:*	@author	H.Someya
        -:    6:*	@date	2021/07/28
        -:    7:*
        -:    8:MIT License
        -:    9:
        -:   10:Copyright (c) 2021 Hirobumi Someya
        -:   11:
        -:   12:Permission is hereby granted, free of charge, to any person obtaining a copy
        -:   13:of this software and associated documentation files (the "Software"), to deal
        -:   14:in the Software without restriction, including without limitation the rights
        -:   15:to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:   16:copies of the Software, and to permit persons to whom the Software is
        -:   17:furnished to do so, subject to the following conditions:
        -:   18:
        -:   19:The above copyright notice and this permission notice shall be included in all
        -:   20:copies or substantial portions of the Software.
        -:   21:
        -:   22:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   23:IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   24:FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   25:AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   26:LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        -:   27:OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        -:   28:SOFTWARE.
        -:   29:*
        -:   30:*/
        -:   31:#include "RingedFrames.h"
        -:   32:#include <string.h>
        -:   33:#include "nullptr.h"
        -:   34:#include "Indices.h"
        -:   35:
        -:   36:/* -------------------------------------------------------------------
        -:   37:*	Privates
        -:   38:*/
        -:   39:
        -:   40:/* -------------------------------------------------------------------
        -:   41:*	Services
        -:   42:*/
        -:   43:
        -:   44:/// <summary>
        -:   45:/// <para>フレームリングバッファを初期化する。</para>
        -:   46:/// </summary>
        -:   47:/// <param name="capacity">最大蓄積可能フレーム数。</param>
        -:   48:/// <param name="frameSize">最大フレームサイズ。</param>
        -:   49:/// <param name="buffer">動作に必要なバッファ。
        -:   50:/// RF_NEEDED_BUFFER_WORDS分の要素数を持つ領域を確保して指定すること。</param>
        -:   51:/// <param name="ctxt">コンテキスト。</param>
        -:   52:/// <returns>なし。</returns>
       10:   53:void RingedFrames_Init(
        -:   54:	int32_t capacity, int32_t frameSize,
        -:   55:	int32_t* buffer,
        -:   56:	RingedFrames* ctxt)
        -:   57:{
       10:   58:	if (ctxt != nullptr)
        -:   59:	{
        8:   60:		memset(ctxt, 0, sizeof(RingedFrames));
        8:   61:		ctxt->Capacity = capacity;
        8:   62:		ctxt->FrameSize = frameSize;
        8:   63:		ctxt->Buffer = buffer;
        -:   64:	}
       10:   65:}
        -:   66:
        -:   67:/// <summary>
        -:   68:/// <para>クリアする。</para>
        -:   69:/// </summary>
        -:   70:/// <param name="ctxt">コンテキスト。</param>
        -:   71:/// <returns>なし。</returns>
        6:   72:void RingedFrames_Clear(
        -:   73:	RingedFrames* ctxt)
        -:   74:{
        6:   75:	if (ctxt != nullptr)
        -:   76:	{
        4:   77:		ctxt->Index = 0;
        4:   78:		ctxt->Count = 0;
        4:   79:		ctxt->UpdateCount = 0;
        -:   80:	}
        6:   81:}
        -:   82:
        -:   83:/// <summary>
        -:   84:/// <para>現在のフレーム蓄積数を取得する。</para>
        -:   85:/// </summary>
        -:   86:/// <param name="ctxt">コンテキスト。</param>
        -:   87:/// <returns>現在のフレーム蓄積数。</returns>
      104:   88:int32_t RingedFrames_Count(
        -:   89:	const RingedFrames* ctxt)
        -:   90:{
      104:   91:	int32_t result = 0;
      104:   92:	if (ctxt != nullptr)
        -:   93:	{
      100:   94:		result = ctxt->Count;
        -:   95:	}
      104:   96:	return result;
        -:   97:}
        -:   98:
        -:   99:/// <summary>
        -:  100:/// <para>現在のフレーム更新数を取得する。</para>
        -:  101:/// <para>フレームリングバッファは最古を上書きするが、蓄積数は最大で停止する。</para>
        -:  102:/// <para>更新数は、最大蓄積数を蓄積した後でも更新される。</para>
        -:  103:/// </summary>
        -:  104:/// <param name="ctxt">コンテキスト。</param>
        -:  105:/// <returns>現在のフレーム更新数。</returns>
       52:  106:int64_t RingedFrames_UpdateCount(
        -:  107:	const RingedFrames* ctxt)
        -:  108:{
       52:  109:	int64_t result = 0;
       52:  110:	if (ctxt != nullptr)
        -:  111:	{
       50:  112:		result = ctxt->UpdateCount;
        -:  113:	}
       52:  114:	return result;
        -:  115:}
        -:  116:
        -:  117:/// <summary>
        -:  118:/// <para>最大蓄積可能フレーム数を取得する。</para>
        -:  119:/// </summary>
        -:  120:/// <param name="ctxt">コンテキスト。</param>
        -:  121:/// <returns>最大蓄積可能フレーム数。</returns>
       14:  122:int32_t RingedFrames_Capacity(
        -:  123:	const RingedFrames* ctxt)
        -:  124:{
       14:  125:	int32_t result = 0;
       14:  126:	if (ctxt != nullptr)
        -:  127:	{
       12:  128:		result = ctxt->Capacity;
        -:  129:	}
       14:  130:	return result;
        -:  131:}
        -:  132:
        -:  133:/// <summary>
        -:  134:/// <para>最大フレームサイズを取得する。</para>
        -:  135:/// </summary>
        -:  136:/// <param name="ctxt">コンテキスト。</param>
        -:  137:/// <returns>最大フレームサイズ。</returns>
        4:  138:int32_t RingedFrames_FrameSize(
        -:  139:	const RingedFrames* ctxt)
        -:  140:{
        4:  141:	int32_t result = 0;
        4:  142:	if (ctxt != nullptr)
        -:  143:	{
        2:  144:		result = ctxt->FrameSize;
        -:  145:	}
        4:  146:	return result;
        -:  147:}
        -:  148:
        -:  149:/// <summary>
        -:  150:/// <para>フレームをPushする。</para>
        -:  151:/// <para>最大蓄積可能フレーム数まで蓄積されていると、最古を上書きする。</para>
        -:  152:/// </summary>
        -:  153:/// <param name="frame">フレーム。</param>
        -:  154:/// <param name="length">フレームの長さ。</param>
        -:  155:/// <param name="timestamp">タイムスタンプ。</param>
        -:  156:/// <param name="ctxt">コンテキスト。</param>
        -:  157:/// <returns>なし。</returns>
       36:  158:void RingedFrames_Push(
        -:  159:	const void* frame, int32_t length,
        -:  160:	int64_t timestamp,
        -:  161:	RingedFrames* ctxt)
        -:  162:{
       36:  163:	if (ctxt != nullptr)
        -:  164:	{
        -:  165:		// 保存先バッファ位置を計算
       34:  166:		int32_t fi = ctxt->Index;
       34:  167:		int32_t bi = RF_STRIDE_WORDS(ctxt->FrameSize) * fi;
       34:  168:		int32_t* bp = &ctxt->Buffer[bi];
        -:  169:
        -:  170:		// ヘッダを記録
       34:  171:		uint8_t* header = (uint8_t*)bp;
        -:  172:		// 0～7バイト目にタイムスタンプを記録
       34:  173:		int64_t* tsp = (int64_t*)&header[0];
       34:  174:		*tsp = timestamp;
        -:  175:		// 8～9バイト目に長さを記録
       34:  176:		int16_t* lenp = (int16_t*)&header[sizeof(int64_t)];
       34:  177:		*lenp = length;
        -:  178:
        -:  179:		// フレームを記録
       34:  180:		uint8_t* fp = &header[RF_FRAME_HEADER_SIZE];
       34:  181:		if ((frame != nullptr) &&
       28:  182:			(0 < length) && (length <= ctxt->FrameSize))
        -:  183:		{
       26:  184:			memcpy(fp, frame, length);
        -:  185:		}
        -:  186:		else
        -:  187:		{
        -:  188:			// フレームが記録されない場合は長さを0にする
        8:  189:			*lenp = 0;
        -:  190:		}
        -:  191:
        -:  192:		// インデックス、カウンタを更新
       34:  193:		ctxt->Index = NextIndex(ctxt->Index, ctxt->Capacity, 0);
       34:  194:		ctxt->Count = Inc2Max(ctxt->Count, ctxt->Capacity);
       34:  195:		ctxt->UpdateCount += 1;
        -:  196:	}
       36:  197:}
        -:  198:
        -:  199:/// <summary>
        -:  200:/// <para>最古を0としたインデックスで、フレームを参照する。</para>
        -:  201:/// <para>コピーせず、内部メモリを直接参照する。</para>
        -:  202:/// </summary>
        -:  203:/// <param name="index">最古を0としたインデックス。</param>
        -:  204:/// <param name="length">フレーム長の格納先。</param>
        -:  205:/// <param name="timestamp">タイムスタンプの格納先。</param>
        -:  206:/// <param name="ctxt">コンテキスト。</param>
        -:  207:/// <returns>フレーム。nullでなし。</returns>
       90:  208:const void* RingedFrames_ReferWithOld(
        -:  209:	int32_t index,
        -:  210:	int32_t* length,
        -:  211:	int64_t* timestamp,
        -:  212:	const RingedFrames* ctxt)
        -:  213:{
        -:  214:	// 結果を初期化
       90:  215:	const void* frame = nullptr;
       90:  216:	if (length != nullptr)
        -:  217:	{
       74:  218:		*length = 0;
        -:  219:	}
       90:  220:	if (timestamp != nullptr)
        -:  221:	{
       74:  222:		*timestamp = 0LL;
        -:  223:	}
        -:  224:
       90:  225:	if ((ctxt != nullptr) &&
       88:  226:		(ctxt->Count > 0) &&
       64:  227:		((0 <= index) && (index < ctxt->Count)))
        -:  228:	{
        -:  229:		// 保存先バッファ位置を計算
      108:  230:		int32_t fi = RoundIndex(
       54:  231:			ctxt->Index - ctxt->Count + index, ctxt->Capacity, 0);
       54:  232:		int32_t bi = RF_STRIDE_WORDS(ctxt->FrameSize) * fi;
       54:  233:		int32_t* bp = &ctxt->Buffer[bi];
        -:  234:
        -:  235:		// ヘッダを取得
       54:  236:		uint8_t* header = (uint8_t*)bp;
        -:  237:		// 0～7バイト目にタイムスタンプが記録されている
       54:  238:		if (timestamp != nullptr)
        -:  239:		{
       46:  240:			int64_t* tsp = (int64_t*)&header[0];
       46:  241:			*timestamp = *tsp;
        -:  242:		}
        -:  243:		// 8～9バイト目に長さが記録されている
       54:  244:		if (length != nullptr)
        -:  245:		{
       46:  246:			int16_t* lenp = (int16_t*)&header[sizeof(int64_t)];
       46:  247:			*length = *lenp;
        -:  248:		}
        -:  249:
        -:  250:		// フレームを取得
       54:  251:		uint8_t* fp = &header[RF_FRAME_HEADER_SIZE];
       54:  252:		frame = fp;
        -:  253:	}
        -:  254:
       90:  255:	return frame;
        -:  256:}
        -:  257:
        -:  258:/// <summary>
        -:  259:/// <para>最新を0としたインデックスで、フレームを参照する。</para>
        -:  260:/// <para>コピーせず、内部メモリを直接参照する。</para>
        -:  261:/// </summary>
        -:  262:/// <param name="index">最新を0としたインデックス。</param>
        -:  263:/// <param name="length">フレーム長の格納先。</param>
        -:  264:/// <param name="timestamp">タイムスタンプの格納先。</param>
        -:  265:/// <param name="ctxt">コンテキスト。</param>
        -:  266:/// <returns>フレーム。nullでなし。</returns>
       38:  267:const void* RingedFrames_ReferWithNew(
        -:  268:	int32_t index,
        -:  269:	int32_t* length,
        -:  270:	int64_t* timestamp,
        -:  271:	const RingedFrames* ctxt)
        -:  272:{
       76:  273:	return RingedFrames_ReferWithOld(
       38:  274:		RingedFrames_Count(ctxt) - 1 - index,
        -:  275:		length, timestamp,
        -:  276:		ctxt);
        -:  277:}
        -:  278:
        -:  279:/// <summary>
        -:  280:/// <para>最古のフレームをPopする。</para>
        -:  281:/// <para>フレームが無い場合は負を返す。</para>
        -:  282:/// <para>格納先が足りない場合は、格納できる分だけ返す。</para>
        -:  283:/// </summary>
        -:  284:/// <param name="buffer">フレームの格納先バッファ。</param>
        -:  285:/// <param name="bufferSize">フレーム格納先バッファのサイズ。</param>
        -:  286:/// <param name="timestamp">タイムスタンプの格納先。</param>
        -:  287:/// <param name="ctxt">コンテキスト。</param>
        -:  288:/// <returns>フレーム長。</returns>
       12:  289:int32_t RingedFrames_Pop(
        -:  290:	void* buffer, int32_t bufferSize,
        -:  291:	int64_t* timestamp,
        -:  292:	RingedFrames* ctxt)
        -:  293:{
        -:  294:	// 結果を初期化
       12:  295:	int32_t length = -1;
       12:  296:	if (timestamp != nullptr)
        -:  297:	{
       10:  298:		*timestamp = 0LL;
        -:  299:	}
        -:  300:
        -:  301:	// 最古のフレームを取得
        -:  302:	int32_t len;
        -:  303:	int64_t ts;
       12:  304:	const void* frame = RingedFrames_ReferWithOld(0, &len, &ts, ctxt);
       12:  305:	if (frame != nullptr)
        -:  306:	{
        -:  307:		// データ長を補正して報告
       10:  308:		length = len;
       10:  309:		if (length > bufferSize)
        -:  310:		{
        4:  311:			length = bufferSize;
        -:  312:		}
        -:  313:
        -:  314:		// フレームを報告
       10:  315:		if ((buffer != nullptr) &&
        -:  316:			(length > 0))
        -:  317:		{
        6:  318:			memcpy(buffer, frame, length);
        -:  319:		}
        -:  320:
        -:  321:		// タイムスタンプを報告
       10:  322:		if (timestamp != nullptr)
        -:  323:		{
        8:  324:			*timestamp = ts;
        -:  325:		}
        -:  326:
        -:  327:		// 最古を削除
       10:  328:		ctxt->Count = Dec2Min(ctxt->Count, 0);
        -:  329:	}
        -:  330:
       12:  331:	return length;
        -:  332:}
        -:  333:
        -:  334:/* -------------------------------------------------------------------
        -:  335:*	Unit Test
        -:  336:*/
        -:  337:#ifdef _UNIT_TEST
        -:  338:#include <assert.h>
        2:  339:void RingedFrames_UnitTest(void)
        -:  340:{
        -:  341:	// -----------------------------------------
        -:  342:	// 1-1
        -:  343:	RingedFrames ring;
        -:  344:	int32_t buffer[1 + RF_NEEDED_BUFFER_WORDS(3, 8) + 1];
        -:  345:	uint8_t frame[8];
        -:  346:	int32_t length;
        -:  347:	int64_t timestamp;
        -:  348:	const uint8_t* referer;
        -:  349:	uint8_t dataBuffer[8];
        -:  350:	int64_t updateCount;
        -:  351:
        -:  352:	// -----------------------------------------
        -:  353:	// 1-1 Init
        2:  354:	memset(buffer, -1, sizeof buffer);
        2:  355:	RingedFrames_Init(3, 8, &buffer[1], &ring);
       2*:  356:	assert(RingedFrames_Count(&ring) == 0);
       2*:  357:	assert(RingedFrames_UpdateCount(&ring) == 0);
        -:  358:	// -----------------------------------------
        -:  359:	// 1-2 Init(self==nullptr)
        2:  360:	RingedFrames_Init(5, 8, &buffer[1], nullptr);
       2*:  361:	assert(RingedFrames_Capacity(&ring) == 3);
        -:  362:
        -:  363:	// -----------------------------------------
        -:  364:	// 2-1 Capacity(self==nullptr)
       2*:  365:	assert(RingedFrames_Capacity(nullptr) == 0);
        -:  366:	// -----------------------------------------
        -:  367:	// 2-2 Capacity
       2*:  368:	assert(RingedFrames_Capacity(&ring) == 3);
        -:  369:
        -:  370:	// -----------------------------------------
        -:  371:	// 3-1 FrameSize(self==nullptr)
       2*:  372:	assert(RingedFrames_FrameSize(nullptr) == 0);
        -:  373:	// -----------------------------------------
        -:  374:	// 3-2 FrameSize
       2*:  375:	assert(RingedFrames_FrameSize(&ring) == 8);
        -:  376:
        -:  377:	// -----------------------------------------
        -:  378:	// 4-1 Count(self==nullptr)
       2*:  379:	assert(RingedFrames_Count(nullptr) == 0);
        -:  380:	// -----------------------------------------
        -:  381:	// 4-2 Count
        2:  382:	memset(frame, 0, sizeof frame);
        2:  383:	frame[0] = 4;
        2:  384:	frame[7] = 2;
       2*:  385:	assert(RingedFrames_Count(&ring) == 0);
        2:  386:	RingedFrames_Push(frame, 8, 42LL, &ring);
       2*:  387:	assert(RingedFrames_Count(&ring) == 1);
        -:  388:
        -:  389:	// -----------------------------------------
        -:  390:	// 5-1 UpdateCount(self==nullptr)
       2*:  391:	assert(RingedFrames_UpdateCount(nullptr) == 0);
        -:  392:	// -----------------------------------------
        -:  393:	// 5-2 UpdateCount
        2:  394:	memset(frame, 0, sizeof frame);
        2:  395:	frame[0] = 5;
        2:  396:	frame[7] = 2;
        2:  397:	updateCount = RingedFrames_UpdateCount(&ring);
        2:  398:	RingedFrames_Push(frame, 8, 52LL, &ring);
       2*:  399:	assert(RingedFrames_UpdateCount(&ring) != updateCount);
        -:  400:
        -:  401:	// -----------------------------------------
        -:  402:	// 6-1 Clear(self==nullptr)
        2:  403:	RingedFrames_Clear(nullptr);
       2*:  404:	assert(RingedFrames_Count(&ring) == 2);
       2*:  405:	assert(RingedFrames_UpdateCount(&ring) != 0);
        -:  406:	// -----------------------------------------
        -:  407:	// 6-2 Clear
        2:  408:	RingedFrames_Clear(&ring);
       2*:  409:	assert(RingedFrames_Count(&ring) == 0);
       2*:  410:	assert(RingedFrames_UpdateCount(&ring) == 0);
        -:  411:
        -:  412:	// -----------------------------------------
        -:  413:	// 7-xx Push, Refer, Pop
        2:  414:	memset(buffer, -1, sizeof buffer);
        2:  415:	RingedFrames_Init(3, 8, &buffer[1], &ring);
        -:  416:
        -:  417:	// -----------------------------------------
        -:  418:	// 7-01 Empty
        2:  419:	RingedFrames_Clear(&ring);
        -:  420:
        -:  421:	// Check
       2*:  422:	assert(RingedFrames_Count(&ring) == 0);
        2:  423:	referer = RingedFrames_ReferWithOld(0, &length, &timestamp, &ring);
       2*:  424:	assert(referer == nullptr);
       2*:  425:	assert(length == 0);
       2*:  426:	assert(timestamp == 0LL);
        2:  427:	referer = RingedFrames_ReferWithNew(0, &length, &timestamp, &ring);
       2*:  428:	assert(referer == nullptr);
       2*:  429:	assert(length == 0);
       2*:  430:	assert(timestamp == 0LL);
        2:  431:	length = RingedFrames_Pop(dataBuffer, sizeof dataBuffer, &timestamp, &ring);
       2*:  432:	assert(length < 0);
       2*:  433:	assert(timestamp == 0LL);
        -:  434:
        -:  435:	// -----------------------------------------
        -:  436:	// 7-02 Push(self==nullptr)
        2:  437:	memset(frame, 0, sizeof frame);
        2:  438:	frame[0] = 7;
        2:  439:	frame[7] = 2;
        2:  440:	RingedFrames_Push(frame, 8, 72LL, nullptr);
        -:  441:
        -:  442:	// Check
       2*:  443:	assert(RingedFrames_Count(&ring) == 0);
        2:  444:	referer = RingedFrames_ReferWithOld(0, &length, &timestamp, &ring);
       2*:  445:	assert(referer == nullptr);
       2*:  446:	assert(length == 0);
       2*:  447:	assert(timestamp == 0LL);
        2:  448:	referer = RingedFrames_ReferWithNew(0, &length, &timestamp, &ring);
       2*:  449:	assert(referer == nullptr);
       2*:  450:	assert(length == 0);
       2*:  451:	assert(timestamp == 0LL);
        -:  452:
        -:  453:	// -----------------------------------------
        -:  454:	// 7-03 Push 1st frame
        2:  455:	updateCount = RingedFrames_UpdateCount(&ring);
        2:  456:	memset(frame, 0, sizeof frame);
        2:  457:	frame[0] = 7;
        2:  458:	frame[7] = 3;
        2:  459:	RingedFrames_Push(frame, 8, 73LL, &ring);
        -:  460:
        -:  461:	// Check
       2*:  462:	assert(RingedFrames_Count(&ring) == 1);
       2*:  463:	assert(RingedFrames_UpdateCount(&ring) != updateCount);
        -:  464:	// Index -1 is not valid
        2:  465:	referer = RingedFrames_ReferWithOld(-1, &length, &timestamp, &ring);
       2*:  466:	assert(referer == nullptr);
       2*:  467:	assert(length == 0);
       2*:  468:	assert(timestamp == 0LL);
        -:  469:	// Index 0 is valid
        2:  470:	referer = RingedFrames_ReferWithOld(0, &length, &timestamp, &ring);
       2*:  471:	assert(referer[0] == 7);
       2*:  472:	assert(referer[7] == 3);
       2*:  473:	assert(length == 8);
       2*:  474:	assert(timestamp == 73LL);
        -:  475:	// Index 1 is not valid
        2:  476:	referer = RingedFrames_ReferWithOld(1, &length, &timestamp, &ring);
       2*:  477:	assert(referer == nullptr);
       2*:  478:	assert(length == 0);
       2*:  479:	assert(timestamp == 0LL);
        -:  480:	// Index -1 is not valid
        2:  481:	referer = RingedFrames_ReferWithNew(-1, &length, &timestamp, &ring);
       2*:  482:	assert(referer == nullptr);
       2*:  483:	assert(length == 0);
       2*:  484:	assert(timestamp == 0LL);
        -:  485:	// Index 0 is valid
        2:  486:	referer = RingedFrames_ReferWithNew(0, &length, &timestamp, &ring);
       2*:  487:	assert(referer[0] == 7);
       2*:  488:	assert(referer[7] == 3);
       2*:  489:	assert(length == 8);
       2*:  490:	assert(timestamp == 73LL);
        -:  491:	// Index 1 is not valid
        2:  492:	referer = RingedFrames_ReferWithNew(1, &length, &timestamp, &ring);
       2*:  493:	assert(referer == nullptr);
       2*:  494:	assert(length == 0);
       2*:  495:	assert(timestamp == 0LL);
        -:  496:
        -:  497:	// -----------------------------------------
        -:  498:	// 7-04 Push 2nd frame
        2:  499:	updateCount = RingedFrames_UpdateCount(&ring);
        2:  500:	memset(frame, 0, sizeof frame);
        2:  501:	frame[0] = 7;
        2:  502:	frame[6] = 4;
        2:  503:	RingedFrames_Push(frame, 7, 74LL, &ring);
        -:  504:
        -:  505:	// Check
       2*:  506:	assert(RingedFrames_Count(&ring) == 2);
       2*:  507:	assert(RingedFrames_UpdateCount(&ring) != updateCount);
        -:  508:	// Index 0 is valid
        2:  509:	referer = RingedFrames_ReferWithOld(0, &length, &timestamp, &ring);
       2*:  510:	assert(referer[0] == 7);
       2*:  511:	assert(referer[7] == 3);
       2*:  512:	assert(length == 8);
       2*:  513:	assert(timestamp == 73LL);
        -:  514:	// Index 1 is valid
        2:  515:	referer = RingedFrames_ReferWithOld(1, &length, &timestamp, &ring);
       2*:  516:	assert(referer[0] == 7);
       2*:  517:	assert(referer[6] == 4);
       2*:  518:	assert(length == 7);
       2*:  519:	assert(timestamp == 74LL);
        -:  520:	// Index 2 is not valid
        2:  521:	referer = RingedFrames_ReferWithOld(2, &length, &timestamp, &ring);
       2*:  522:	assert(referer == nullptr);
       2*:  523:	assert(length == 0);
       2*:  524:	assert(timestamp == 0LL);
        -:  525:	// Index 0 is valid
        2:  526:	referer = RingedFrames_ReferWithNew(0, &length, &timestamp, &ring);
       2*:  527:	assert(referer[0] == 7);
       2*:  528:	assert(referer[6] == 4);
       2*:  529:	assert(length == 7);
       2*:  530:	assert(timestamp == 74LL);
        -:  531:	// Index 1 is valid
        2:  532:	referer = RingedFrames_ReferWithNew(1, &length, &timestamp, &ring);
       2*:  533:	assert(referer[0] == 7);
       2*:  534:	assert(referer[7] == 3);
       2*:  535:	assert(length == 8);
       2*:  536:	assert(timestamp == 73LL);
        -:  537:	// Index 2 is not valid
        2:  538:	referer = RingedFrames_ReferWithNew(2, &length, &timestamp, &ring);
       2*:  539:	assert(referer == nullptr);
       2*:  540:	assert(length == 0);
       2*:  541:	assert(timestamp == 0LL);
        -:  542:
        -:  543:	// -----------------------------------------
        -:  544:	// 7-05 Push 3rd frame
        2:  545:	updateCount = RingedFrames_UpdateCount(&ring);
        2:  546:	memset(frame, 0, sizeof frame);
        2:  547:	frame[0] = 7;
        2:  548:	frame[7] = 5;
        2:  549:	RingedFrames_Push(frame, 8, 75LL, &ring);
        -:  550:
        -:  551:	// Check
       2*:  552:	assert(RingedFrames_Count(&ring) == 3);
       2*:  553:	assert(RingedFrames_UpdateCount(&ring) != updateCount);
        -:  554:	// Index 0 is valid
        2:  555:	referer = RingedFrames_ReferWithOld(0, &length, &timestamp, &ring);
       2*:  556:	assert(referer[0] == 7);
       2*:  557:	assert(referer[7] == 3);
       2*:  558:	assert(length == 8);
       2*:  559:	assert(timestamp == 73LL);
        -:  560:	// Index 2 is valid
        2:  561:	referer = RingedFrames_ReferWithOld(2, &length, &timestamp, &ring);
       2*:  562:	assert(referer[0] == 7);
       2*:  563:	assert(referer[7] == 5);
       2*:  564:	assert(length == 8);
       2*:  565:	assert(timestamp == 75LL);
        -:  566:	// Index 3 is not valid
        2:  567:	referer = RingedFrames_ReferWithOld(3, &length, &timestamp, &ring);
       2*:  568:	assert(referer == nullptr);
       2*:  569:	assert(length == 0);
       2*:  570:	assert(timestamp == 0LL);
        -:  571:	// Index 0 is valid
        2:  572:	referer = RingedFrames_ReferWithNew(0, &length, &timestamp, &ring);
       2*:  573:	assert(referer[0] == 7);
       2*:  574:	assert(referer[7] == 5);
       2*:  575:	assert(length == 8);
       2*:  576:	assert(timestamp == 75LL);
        -:  577:	// Index 2 is valid
        2:  578:	referer = RingedFrames_ReferWithNew(2, &length, &timestamp, &ring);
       2*:  579:	assert(referer[0] == 7);
       2*:  580:	assert(referer[7] == 3);
       2*:  581:	assert(length == 8);
       2*:  582:	assert(timestamp == 73LL);
        -:  583:	// Index 3 is not valid
        2:  584:	referer = RingedFrames_ReferWithNew(3, &length, &timestamp, &ring);
       2*:  585:	assert(referer == nullptr);
       2*:  586:	assert(length == 0);
       2*:  587:	assert(timestamp == 0LL);
        -:  588:
        -:  589:	// -----------------------------------------
        -:  590:	// 7-06 Push 4th frame, lost 1st frame
        2:  591:	updateCount = RingedFrames_UpdateCount(&ring);
        2:  592:	memset(frame, 0, sizeof frame);
        2:  593:	frame[0] = 7;
        2:  594:	frame[6] = 6;
        2:  595:	RingedFrames_Push(frame, 7, 76LL, &ring);
        -:  596:
        -:  597:	// Check
       2*:  598:	assert(RingedFrames_Count(&ring) == 3);
       2*:  599:	assert(RingedFrames_UpdateCount(&ring) != updateCount);
        -:  600:	// Index 0 is valid, but moved
        2:  601:	referer = RingedFrames_ReferWithOld(0, &length, &timestamp, &ring);
       2*:  602:	assert(referer[0] == 7);
       2*:  603:	assert(referer[6] == 4);
       2*:  604:	assert(length == 7);
       2*:  605:	assert(timestamp == 74LL);
        -:  606:	// Index 2 is valid, but moved
        2:  607:	referer = RingedFrames_ReferWithOld(2, &length, &timestamp, &ring);
       2*:  608:	assert(referer[0] == 7);
       2*:  609:	assert(referer[6] == 6);
       2*:  610:	assert(length == 7);
       2*:  611:	assert(timestamp == 76LL);
        -:  612:	// Index 0 is valid
        2:  613:	referer = RingedFrames_ReferWithNew(0, &length, &timestamp, &ring);
       2*:  614:	assert(referer[0] == 7);
       2*:  615:	assert(referer[6] == 6);
       2*:  616:	assert(length == 7);
       2*:  617:	assert(timestamp == 76LL);
        -:  618:	// Index 2 is valid
        2:  619:	referer = RingedFrames_ReferWithNew(2, &length, &timestamp, &ring);
       2*:  620:	assert(referer[0] == 7);
       2*:  621:	assert(referer[6] == 4);
       2*:  622:	assert(length == 7);
       2*:  623:	assert(timestamp == 74LL);
        -:  624:
        -:  625:	// Do not destroy memories
       2*:  626:	assert(buffer[0] == -1);
       2*:  627:	assert(buffer[((sizeof buffer) / sizeof buffer[0]) - 1] == -1);
        -:  628:
        -:  629:	// -----------------------------------------
        -:  630:	// 7-07 Pop
        2:  631:	length = RingedFrames_Pop(dataBuffer, sizeof dataBuffer, &timestamp, &ring);
       2*:  632:	assert(dataBuffer[0] == 7);
       2*:  633:	assert(dataBuffer[6] == 4);
       2*:  634:	assert(length == 7);
       2*:  635:	assert(timestamp == 74LL);
        -:  636:
       2*:  637:	assert(RingedFrames_Count(&ring) == 2);
        -:  638:
        -:  639:	// -----------------------------------------
        -:  640:	// 7-08 Refer length only
        2:  641:	referer = RingedFrames_ReferWithNew(0, &length, nullptr, &ring);
       2*:  642:	assert(referer[0] == 7);
       2*:  643:	assert(referer[6] == 6);
       2*:  644:	assert(length == 7);
        -:  645:
        -:  646:	// -----------------------------------------
        -:  647:	// 7-09 Refer timestamp only
        2:  648:	referer = RingedFrames_ReferWithNew(0, nullptr, &timestamp, &ring);
       2*:  649:	assert(referer[0] == 7);
       2*:  650:	assert(referer[6] == 6);
       2*:  651:	assert(timestamp == 76LL);
        -:  652:
        -:  653:	// -----------------------------------------
        -:  654:	// 7-10 Push zero length frame
        2:  655:	updateCount = RingedFrames_UpdateCount(&ring);
        2:  656:	RingedFrames_Push(nullptr, 0, 710LL, &ring);
        -:  657:
        -:  658:	// Check
       2*:  659:	assert(RingedFrames_Count(&ring) == 3);
       2*:  660:	assert(RingedFrames_UpdateCount(&ring) != updateCount);
        -:  661:	// Index 0 is valid, but length is zero
        2:  662:	referer = RingedFrames_ReferWithNew(0, &length, &timestamp, &ring);
       2*:  663:	assert(referer != nullptr);
       2*:  664:	assert(length == 0);
       2*:  665:	assert(timestamp == 710LL);
        -:  666:
        -:  667:	// -----------------------------------------
        -:  668:	// 7-11 Push oversized frame
        2:  669:	updateCount = RingedFrames_UpdateCount(&ring);
        2:  670:	RingedFrames_Push(frame, 9, 711LL, &ring);
        -:  671:
        -:  672:	// Check
       2*:  673:	assert(RingedFrames_Count(&ring) == 3);
       2*:  674:	assert(RingedFrames_UpdateCount(&ring) != updateCount);
        -:  675:	// Index 0 is valid, but length is zero
        2:  676:	referer = RingedFrames_ReferWithNew(0, &length, &timestamp, &ring);
       2*:  677:	assert(referer != nullptr);
       2*:  678:	assert(length == 0);
       2*:  679:	assert(timestamp == 711LL);
        -:  680:
        -:  681:	// -----------------------------------------
        -:  682:	// 7-12 Push null frame
        2:  683:	updateCount = RingedFrames_UpdateCount(&ring);
        2:  684:	RingedFrames_Push(nullptr, 0, 712LL, &ring);
        -:  685:
        -:  686:	// Check
       2*:  687:	assert(RingedFrames_Count(&ring) == 3);
       2*:  688:	assert(RingedFrames_UpdateCount(&ring) != updateCount);
        -:  689:	// Index 0 is valid, but length is zero
        2:  690:	referer = RingedFrames_ReferWithNew(0, &length, &timestamp, &ring);
       2*:  691:	assert(referer != nullptr);
       2*:  692:	assert(length == 0);
       2*:  693:	assert(timestamp == 712LL);
        -:  694:
        -:  695:	// -----------------------------------------
        -:  696:	// 7-13 Refer(self==nullptr)
        2:  697:	updateCount = RingedFrames_UpdateCount(&ring);
        2:  698:	memset(frame, 0, sizeof frame);
        2:  699:	frame[0] = 7;
        2:  700:	frame[6] = 13;
        2:  701:	RingedFrames_Push(frame, 7, 713LL, &ring);
        -:  702:
        -:  703:	// Check
       2*:  704:	assert(RingedFrames_Count(&ring) == 3);
       2*:  705:	assert(RingedFrames_UpdateCount(&ring) != updateCount);
        2:  706:	referer = RingedFrames_ReferWithNew(0, &length, &timestamp, nullptr);
       2*:  707:	assert(referer == nullptr);
       2*:  708:	assert(length == 0);
       2*:  709:	assert(timestamp == 0LL);
        -:  710:
        -:  711:	// -----------------------------------------
        -:  712:	// 7-14 Pop but not enough buffer
        2:  713:	updateCount = RingedFrames_UpdateCount(&ring);
        2:  714:	memset(frame, 0, sizeof frame);
        2:  715:	frame[0] = 7;
        2:  716:	frame[5] = 1;
        2:  717:	frame[6] = 141;
        2:  718:	RingedFrames_Push(frame, 7, 7141LL, &ring);
        2:  719:	memset(frame, 0, sizeof frame);
        2:  720:	frame[0] = 7;
        2:  721:	frame[7] = 142;
        2:  722:	RingedFrames_Push(frame, 8, 7142LL, &ring);
        2:  723:	memset(frame, 0, sizeof frame);
        2:  724:	frame[0] = 7;
        2:  725:	frame[5] = 143;
        2:  726:	RingedFrames_Push(frame, 6, 7143LL, &ring);
        -:  727:
        2:  728:	length = RingedFrames_Pop(dataBuffer, 6, &timestamp, &ring);
        -:  729:
        -:  730:	// Check
       2*:  731:	assert(RingedFrames_Count(&ring) == 2);
       2*:  732:	assert(RingedFrames_UpdateCount(&ring) != updateCount);
       2*:  733:	assert(length == 6);
       2*:  734:	assert(timestamp == 7141LL);
       2*:  735:	assert(dataBuffer[0] == 7);
       2*:  736:	assert(dataBuffer[5] == 1);
        -:  737:
        -:  738:	// -----------------------------------------
        -:  739:	// 7-14 Pop only timestamp
        2:  740:	length = RingedFrames_Pop(nullptr, 0, &timestamp, &ring);
        -:  741:
        -:  742:	// Check
       2*:  743:	assert(RingedFrames_Count(&ring) == 1);
       2*:  744:	assert(length == 0);
       2*:  745:	assert(timestamp == 7142LL);
        -:  746:
        -:  747:	// -----------------------------------------
        -:  748:	// 7-15 Pop without timestamp
        2:  749:	length = RingedFrames_Pop(dataBuffer, sizeof dataBuffer, nullptr, &ring);
        -:  750:
        -:  751:	// Check
       2*:  752:	assert(RingedFrames_Count(&ring) == 0);
       2*:  753:	assert(length == 6);
       2*:  754:	assert(dataBuffer[0] == 7);
       2*:  755:	assert(dataBuffer[5] == 143);
        -:  756:
        -:  757:	// -----------------------------------------
        -:  758:	// 7-16 Pop zero length frame
        2:  759:	updateCount = RingedFrames_UpdateCount(&ring);
        2:  760:	RingedFrames_Push(nullptr, 0, 716LL, &ring);
        -:  761:
        2:  762:	length = RingedFrames_Pop(dataBuffer, sizeof dataBuffer, &timestamp, &ring);
        -:  763:
        -:  764:	// Check
       2*:  765:	assert(RingedFrames_Count(&ring) == 0);
       2*:  766:	assert(RingedFrames_UpdateCount(&ring) != updateCount);
       2*:  767:	assert(length == 0);
       2*:  768:	assert(timestamp == 716LL);
        2:  769:}
        -:  770:#endif
