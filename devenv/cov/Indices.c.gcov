        -:    0:Source:../../src/Indices.c
        -:    0:Graph:obj/src/Indices.gcno
        -:    0:Data:obj/src/Indices.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:﻿/** ------------------------------------------------------------------
        -:    2:*
        -:    3:*	@file	Indices.c
        -:    4:*	@brief	Index Operations
        -:    5:*	@author	H.Someya
        -:    6:*	@date	2019/12/12
        -:    7:*
        -:    8:MIT License
        -:    9:
        -:   10:Copyright (c) 2019 Hirobumi Someya
        -:   11:
        -:   12:Permission is hereby granted, free of charge, to any person obtaining a copy
        -:   13:of this software and associated documentation files (the "Software"), to deal
        -:   14:in the Software without restriction, including without limitation the rights
        -:   15:to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:   16:copies of the Software, and to permit persons to whom the Software is
        -:   17:furnished to do so, subject to the following conditions:
        -:   18:
        -:   19:The above copyright notice and this permission notice shall be included in all
        -:   20:copies or substantial portions of the Software.
        -:   21:
        -:   22:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   23:IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   24:FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   25:AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   26:LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        -:   27:OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        -:   28:SOFTWARE.
        -:   29:*
        -:   30:*/
        -:   31:#include "Indices.h"
        -:   32:
        -:   33:/* -------------------------------------------------------------------
        -:   34:*	Privates
        -:   35:*/
        -:   36:
        -:   37:/* -------------------------------------------------------------------
        -:   38:*	Services
        -:   39:*/
        -:   40:
        -:   41:/// <summary>
        -:   42:/// 次インデックス取得
        -:   43:/// </summary>
        -:   44:/// <param name="index">現在インデックス</param>
        -:   45:/// <param name="max">最大インデックス</param>
        -:   46:/// <param name="min">最小インデックス</param>
        -:   47:/// <returns>次インデックス</returns>
       19:   48:int32_t NextIndex(int32_t index, int32_t max, int32_t min)
        -:   49:{
       19:   50:	if (index + 1 < max)
        -:   51:	{
       13:   52:		index += 1;
        -:   53:	}
        -:   54:	else
        -:   55:	{
        6:   56:		index = min;
        -:   57:	}
       19:   58:	return index;
        -:   59:}
        -:   60:
        -:   61:/// <summary>
        -:   62:/// 前インデックス取得
        -:   63:/// </summary>
        -:   64:/// <param name="index">現在インデックス</param>
        -:   65:/// <param name="max">最大インデックス</param>
        -:   66:/// <param name="min">最小インデックス</param>
        -:   67:/// <returns>前インデックス</returns>
        3:   68:int32_t PreviousIndex(int32_t index, int32_t max, int32_t min)
        -:   69:{
        3:   70:	if (index > min)
        -:   71:	{
        2:   72:		index -= 1;
        -:   73:	}
        -:   74:	else
        -:   75:	{
        1:   76:		index = max - 1;
        -:   77:	}
        3:   78:	return index;
        -:   79:}
        -:   80:
        -:   81:/// <summary>
        -:   82:/// 巡回インデックス取得
        -:   83:/// </summary>
        -:   84:/// <param name="index">現在インデックス</param>
        -:   85:/// <param name="max">最大インデックス</param>
        -:   86:/// <param name="min">最小インデックス</param>
        -:   87:/// <returns>巡回インデックス</returns>
       30:   88:int32_t RoundIndex(int32_t index, int32_t max, int32_t min)
        -:   89:{
       30:   90:	if (index < min)
        -:   91:	{
       12:   92:		index = max - (min - index);
        -:   93:	}
       18:   94:	else if (index >= max)
        -:   95:	{
        1:   96:		index = min + (index - max);
        -:   97:	}
       30:   98:	return index;
        -:   99:}
        -:  100:
        -:  101:/// <summary>
        -:  102:/// 最大まで増加させる。
        -:  103:/// </summary>
        -:  104:/// <param name="d">現在値</param>
        -:  105:/// <param name="max">最大値</param>
        -:  106:/// <returns>更新された値</returns>
       31:  107:int32_t Inc2Max(int32_t d, int32_t max)
        -:  108:{
       31:  109:	if (d < max)
        -:  110:	{
       23:  111:		d += 1;
        -:  112:	}
       31:  113:	return d;
        -:  114:}
        -:  115:
        -:  116:/// <summary>
        -:  117:/// 最小まで減算する。
        -:  118:/// </summary>
        -:  119:/// <param name="d">現在値</param>
        -:  120:/// <param name="min">最小値</param>
        -:  121:/// <returns>更新された値</returns>
        8:  122:int32_t Dec2Min(int32_t d, int32_t min)
        -:  123:{
        8:  124:	if (d > min)
        -:  125:	{
        7:  126:		d -= 1;
        -:  127:	}
        8:  128:	return d;
        -:  129:}
        -:  130:
        -:  131:/// <summary>
        -:  132:/// <para>最小～最大の間で次の値を得る。</para>
        -:  133:/// <para>最大は含まれる。</para>
        -:  134:/// </summary>
        -:  135:/// <param name="minimum">最小値</param>
        -:  136:/// <param name="maximum">最大値</param>
        -:  137:/// <param name="value">現在値</param>
        -:  138:/// <returns>更新された値</returns>
        7:  139:int32_t NextWithin(int32_t minimum, int32_t maximum, int32_t value)
        -:  140:{
        7:  141:	value += 1;
        7:  142:	if ((minimum <= value) && (value <= maximum))
        -:  143:	{
        -:  144:		// 加算して範囲内ならそのまま
        -:  145:	}
        -:  146:	else
        -:  147:	{
        -:  148:		// 加算して範囲外なら最小に戻す
        4:  149:		value = minimum;
        -:  150:	}
        7:  151:	return value;
        -:  152:}
        -:  153:
        -:  154:/* -------------------------------------------------------------------
        -:  155:*	Unit Test
        -:  156:*/
        -:  157:#ifdef _UNIT_TEST
        -:  158:#include <assert.h>
        1:  159:void Indices_UnitTest(void)
        -:  160:{
        -:  161:	// -----------------------------------------
        -:  162:	// 1-1 NextIndex
       1*:  163:	assert(NextIndex(1, 3, 1) == 2);
        -:  164:	// -----------------------------------------
        -:  165:	// 1-2 NextIndex
       1*:  166:	assert(NextIndex(2, 3, 1) == 1);
        -:  167:
        -:  168:	// -----------------------------------------
        -:  169:	// 2-1 PreviousIndex
       1*:  170:	assert(PreviousIndex(1, 3, -1) == 0);
        -:  171:	// -----------------------------------------
        -:  172:	// 2-2 PreviousIndex
       1*:  173:	assert(PreviousIndex(0, 3, -1) == -1);
        -:  174:	// -----------------------------------------
        -:  175:	// 2-3 PreviousIndex
       1*:  176:	assert(PreviousIndex(-1, 3, -1) == 2);
        -:  177:
        -:  178:	// -----------------------------------------
        -:  179:	// 3-1 RoundIndex
       1*:  180:	assert(RoundIndex(1, 3, 0) == 1);
        -:  181:	// -----------------------------------------
        -:  182:	// 3-2 RoundIndex
       1*:  183:	assert(RoundIndex(-1, 3, 0) == 2);
        -:  184:	// -----------------------------------------
        -:  185:	// 3-3 RoundIndex
       1*:  186:	assert(RoundIndex(4, 3, 0) == 1);
        -:  187:
        -:  188:	// -----------------------------------------
        -:  189:	// 4-1 Inc2Max
       1*:  190:	assert(Inc2Max(1, 3) == 2);
        -:  191:	// -----------------------------------------
        -:  192:	// 4-2 Inc2Max
       1*:  193:	assert(Inc2Max(2, 3) == 3);
        -:  194:	// -----------------------------------------
        -:  195:	// 4-3 Inc2Max
       1*:  196:	assert(Inc2Max(3, 3) == 3);
        -:  197:
        -:  198:	// -----------------------------------------
        -:  199:	// 5-1 Dec2Min
       1*:  200:	assert(Dec2Min(1, -1) == 0);
        -:  201:	// -----------------------------------------
        -:  202:	// 5-2 Dec2Min
       1*:  203:	assert(Dec2Min(0, -1) == -1);
        -:  204:	// -----------------------------------------
        -:  205:	// 5-3 Dec2Min
       1*:  206:	assert(Dec2Min(-1, -1) == -1);
        -:  207:
        -:  208:	// -----------------------------------------
        -:  209:	// 6-1 NextWithin
       1*:  210:	assert(NextWithin(3, 11, 0) == 3);
        -:  211:	// -----------------------------------------
        -:  212:	// 6-2 NextWithin
       1*:  213:	assert(NextWithin(3, 11, 3) == 4);
        -:  214:	// -----------------------------------------
        -:  215:	// 6-3 NextWithin
       1*:  216:	assert(NextWithin(3, 11, 10) == 11);
        -:  217:	// -----------------------------------------
        -:  218:	// 6-4 NextWithin
       1*:  219:	assert(NextWithin(3, 11, 11) == 3);
        -:  220:	// -----------------------------------------
        -:  221:	// 6-5 NextWithin
       1*:  222:	assert(NextWithin(3, 11, 12) == 3);
        -:  223:	// -----------------------------------------
        -:  224:	// 6-6 NextWithin
       1*:  225:	assert(NextWithin(3, 0x7fffffff, 0x7ffffffe) == 0x7fffffff);
        -:  226:	// -----------------------------------------
        -:  227:	// 6-7 NextWithin
       1*:  228:	assert(NextWithin(3, 0x7fffffff, 0x7fffffff) == 3);
        1:  229:}
        -:  230:#endif
