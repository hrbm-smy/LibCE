        -:    0:Source:../../inc/MmIo.h
        -:    0:Graph:obj/src/MmIo.gcno
        -:    0:Data:obj/src/MmIo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef __MmIo_H__
        -:    2:#define __MmIo_H__
        -:    3:
        -:    4:/** ------------------------------------------------------------------
        -:    5: *
        -:    6: *	@file	MmIo.h
        -:    7: *	@brief	Memory Mapped I/O
        -:    8: *	@author	H.Someya
        -:    9: *	@date	2023/05/09
        -:   10: *
        -:   11: */
        -:   12:/*
        -:   13:MIT License
        -:   14:
        -:   15:Copyright (c) 2021 Hirobumi Someya
        -:   16:
        -:   17:Permission is hereby granted, free of charge, to any person obtaining a copy
        -:   18:of this software and associated documentation files (the "Software"), to deal
        -:   19:in the Software without restriction, including without limitation the rights
        -:   20:to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:   21:copies of the Software, and to permit persons to whom the Software is
        -:   22:furnished to do so, subject to the following conditions:
        -:   23:
        -:   24:The above copyright notice and this permission notice shall be included in all
        -:   25:copies or substantial portions of the Software.
        -:   26:
        -:   27:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   28:IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   29:FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   30:AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   31:LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        -:   32:OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        -:   33:SOFTWARE.
        -:   34:*/
        -:   35:#include <stdint.h>
        -:   36:
        -:   37:/*----------------------------------------------------------------------
        -:   38: *  P U B L I C   D E F I N I T I O N S
        -:   39: */
        -:   40:
        -:   41:/**
        -:   42: * inline definition
        -:   43: */
        -:   44:#define MMIO_INLINE inline
        -:   45:
        -:   46:/*----------------------------------------------------------------------
        -:   47: *  P U B L I C   I N T E R F A C E S
        -:   48: */
        -:   49:
        -:   50:#ifdef __cplusplus
        -:   51:extern "C"
        -:   52:{
        -:   53:#endif
        -:   54:
        -:   55:    /**
        -:   56:     *  @brief 32bits I/O data reader @n
        -:   57:     *    Read 32bits value from base + offset.
        -:   58:     *  @param base Base address.
        -:   59:     *  @param offset Offset to the base address.
        -:   60:     *  @return Read value.
        -:   61:     */
       10:   62:    static MMIO_INLINE uint32_t MmIo_ReadU32(
        -:   63:        uintptr_t base, uintptr_t offset)
        -:   64:    {
       10:   65:        uint32_t result = 0;
       10:   66:        volatile uint32_t *addr = (volatile uint32_t *)(base + offset);
       10:   67:        result = *addr;
       10:   68:        return result;
        -:   69:    }
        -:   70:
        -:   71:    /**
        -:   72:     *  @brief 32bits I/O data writer @n
        -:   73:     *    Write 32bits value to base + offset.
        -:   74:     *  @param value Write value.
        -:   75:     *  @param base Base address.
        -:   76:     *  @param offset Offset to the base address.
        -:   77:     *  @return Wrote value, not a device read value.
        -:   78:     */
        5:   79:    static MMIO_INLINE uint32_t MmIo_WriteU32(
        -:   80:        uint32_t value,
        -:   81:        uintptr_t base, uintptr_t offset)
        -:   82:    {
        5:   83:        uint32_t result = 0;
        5:   84:        volatile uint32_t *addr = (volatile uint32_t *)(base + offset);
        5:   85:        *addr = value;
        5:   86:        result = value;
        5:   87:        return result;
        -:   88:    }
        -:   89:
        -:   90:    /**
        -:   91:     *  @brief Few bits I/O data writer @n
        -:   92:     *    Write few bits to base + offset.
        -:   93:     *  @param value Write value.
        -:   94:     *  @param bitStart Bit start index.
        -:   95:     *  @param bitCount Bit count.
        -:   96:     *  @param base Base address.
        -:   97:     *  @param offset Offset to the base address.
        -:   98:     *  @return Wrote value, not a device read value.
        -:   99:     */
        -:  100:    uint32_t MmIo_WriteBitsU32(
        -:  101:        uint32_t value,
        -:  102:        int32_t bitStart, int32_t bitCount,
        -:  103:        uintptr_t base, uintptr_t offset);
        -:  104:
        -:  105:#ifdef _UNIT_TEST
        -:  106:    void MmIo_UnitTest(void);
        -:  107:#endif
        -:  108:
        -:  109:#ifdef __cplusplus
        -:  110:}
        -:  111:#endif
        -:  112:
        -:  113:#endif
