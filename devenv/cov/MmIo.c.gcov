        -:    0:Source:../../src/MmIo.c
        -:    0:Graph:obj/src/MmIo.gcno
        -:    0:Data:obj/src/MmIo.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:/** ------------------------------------------------------------------
        -:    2: *
        -:    3: *	@file	MmIo.c
        -:    4: *	@brief	Memory Mapped I/O
        -:    5: *	@author	H.Someya
        -:    6: *	@date	2023/05/09
        -:    7: *
        -:    8: */
        -:    9:/*
        -:   10:MIT License
        -:   11:
        -:   12:Copyright (c) 2021 Hirobumi Someya
        -:   13:
        -:   14:Permission is hereby granted, free of charge, to any person obtaining a copy
        -:   15:of this software and associated documentation files (the "Software"), to deal
        -:   16:in the Software without restriction, including without limitation the rights
        -:   17:to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:   18:copies of the Software, and to permit persons to whom the Software is
        -:   19:furnished to do so, subject to the following conditions:
        -:   20:
        -:   21:The above copyright notice and this permission notice shall be included in all
        -:   22:copies or substantial portions of the Software.
        -:   23:
        -:   24:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   25:IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   26:FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   27:AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   28:LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        -:   29:OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        -:   30:SOFTWARE.
        -:   31:*/
        -:   32:#include "MmIo.h"
        -:   33:
        -:   34:/*----------------------------------------------------------------------
        -:   35: *  P R I V A T E S
        -:   36: */
        -:   37:/*----------------------------------------------------------------------
        -:   38: *  P U B L I C   I N T E R F A C E S
        -:   39: */
        -:   40:
        -:   41:/**
        -:   42: *  @brief Few bits I/O data writer @n
        -:   43: *    Write few bits to base + offset.
        -:   44: *  @param value Write value.
        -:   45: *  @param bitStart Bit start index.
        -:   46: *  @param bitCount Bit count.
        -:   47: *  @param base Base address.
        -:   48: *  @param offset Offset to the base address.
        -:   49: *  @return Wrote value, not a device read value.
        -:   50: */
        9:   51:uint32_t MmIo_WriteBitsU32(
        -:   52:	uint32_t value,
        -:   53:	int32_t bitStart, int32_t bitCount,
        -:   54:	uintptr_t base, uintptr_t offset)
        -:   55:{
        9:   56:	uint32_t result = 0;
        -:   57:
        9:   58:	uint32_t mask = ~0;
        9:   59:	mask <<= (32 - bitCount);
        9:   60:	mask >>= ((32 - bitCount) - bitStart);
        -:   61:
        9:   62:	uint32_t d = MmIo_ReadU32(base, offset);
        9:   63:	d &= ~mask;
        9:   64:	d |= ((value << bitStart) & mask);
        9:   65:	MmIo_WriteU32(d, base, offset);
        9:   66:	result = d;
        -:   67:
        9:   68:	return result;
        -:   69:}
        -:   70:
        -:   71:#ifdef _UNIT_TEST
        -:   72:#include "Assertions.h"
        3:   73:void MmIo_UnitTest(void)
        -:   74:{
        3:   75:	Assertions *ast = Assertions_Instance();
        -:   76:
        -:   77:	uint32_t ioArea[4];
        -:   78:#define IOBASE (uintptr_t)(&ioArea[0])
        -:   79:
        3:   80:	ioArea[0] = 0x11223344;
        3:   81:	ioArea[1] = 0x55667788;
        3:   82:	ioArea[2] = 0x99aabbcc;
        3:   83:	ioArea[3] = 0xddeeff00;
        -:   84:
        -:   85:	/*
        -:   86:	1-x MmIo_ReadU32
        -:   87:	*/
        -:   88:	/*
        -:   89:	1-1 MmIo_ReadU32
        -:   90:	*/
        3:   91:	Assertions_Assert(MmIo_ReadU32(IOBASE, 0) == 0x11223344, ast);
        -:   92:	/*
        -:   93:	1-2 MmIo_ReadU32
        -:   94:	*/
        3:   95:	Assertions_Assert(MmIo_ReadU32(IOBASE, 0xc) == 0xddeeff00, ast);
        -:   96:
        -:   97:	/*
        -:   98:	2-x MmIo_WriteU32
        -:   99:	*/
        -:  100:	/*
        -:  101:	2-1 MmIo_WriteU32
        -:  102:	*/
        3:  103:	MmIo_WriteU32(0x01234567, IOBASE, 0);
        3:  104:	Assertions_Assert(MmIo_ReadU32(IOBASE, 0) == 0x01234567, ast);
        -:  105:	/*
        -:  106:	2-2 MmIo_WriteU32
        -:  107:	*/
        3:  108:	MmIo_WriteU32(0xfedcba98, IOBASE, 0x8);
        3:  109:	Assertions_Assert(MmIo_ReadU32(IOBASE, 0x8) == 0xfedcba98, ast);
        -:  110:
        -:  111:	/*
        -:  112:	3-x MmIo_WriteBitsU32
        -:  113:	*/
        -:  114:	/*
        -:  115:	3-1 MmIo_WriteBitsU32
        -:  116:	*/
        3:  117:	MmIo_WriteBitsU32(0xab, 24, 8, IOBASE, 0x8);
        3:  118:	Assertions_Assert(MmIo_ReadU32(IOBASE, 0x8) == 0xabdcba98, ast);
        -:  119:	/*
        -:  120:	3-2 MmIo_WriteBitsU32
        -:  121:	*/
        3:  122:	MmIo_WriteBitsU32(0xef, 8, 8, IOBASE, 0x8);
        3:  123:	Assertions_Assert(MmIo_ReadU32(IOBASE, 0x8) == 0xabdcef98, ast);
        -:  124:	/*
        -:  125:	3-2 MmIo_WriteBitsU32
        -:  126:	*/
        3:  127:	MmIo_WriteBitsU32(0x89, 4, 8, IOBASE, 0x8);
        3:  128:	Assertions_Assert(MmIo_ReadU32(IOBASE, 0x8) == 0xabdce898, ast);
        3:  129:}
        -:  130:#endif
